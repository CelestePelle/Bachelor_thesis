Database downloaded \texttt{11/02/2025}
```{r}
#making plots of the fifteen chosen countries 
world_mortality_df <- read.csv("World_Mortality/world_mortality.csv", sep = ",")
countries <- c('Egypt', 'Namibia', 'Colombia', 'Argentina', 'Russia', 'Japan', 'Thailand', 'Netherlands', 'Luxembourg', 'United Kingdom', 'Estonia', 'Bulgaria', 'United States', 'Mexico', 'Australia')

for(i in countries){
  #getting data for each country
  data <- dplyr::filter(world_mortality_df, country_name == i, time != 53, world_mortality_df$year<2022)
  #ordering data
  if(data$time_unit[1] == "weekly"){
    data$year_plus_time_unit <- data$year + (data$time / 52)
  }
  else 
    data$year_plus_time_unit <- data$year + (data$time / 12)
  n <- nrow(data)
  lag <- n/4
  png(filename = paste0("plot_", i, ".png"), width = 640, height = 480)
  plot(data$year_plus_time_unit, data$deaths, type='l', xlab = 'Year', ylab = 'Deaths', main = i, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
  dev.off()
  png(filename = paste0("acf_", i, ".png"), width = 640, height = 480)
  acf(data$deaths, type = 'correlation', lag.max = lag, main = i, xlab='Lag', ylab='ACF', cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
  dev.off()
}

```

Data per country
```{r}
Egypt <- dplyr::filter(world_mortality_df, country_name == 'Egypt')
Namibia <- dplyr::filter(world_mortality_df, country_name == 'Namibia')
Colombia <- dplyr::filter(world_mortality_df, country_name == 'Colombia')
Argentina <- dplyr::filter(world_mortality_df, country_name == 'Argentina')
Russia <- dplyr::filter(world_mortality_df, country_name == 'Russia')
Japan <- dplyr::filter(world_mortality_df, country_name == 'Japan')
Thailand <- dplyr::filter(world_mortality_df, country_name == 'Thailand')
NL <- dplyr::filter(world_mortality_df, country_name == 'Netherlands')
Luxembourg <- dplyr::filter(world_mortality_df, country_name == 'Luxembourg')
UK <- dplyr::filter(world_mortality_df, country_name == 'United Kingdom')
Estonia <- dplyr::filter(world_mortality_df, country_name == 'Estonia')
Bulgaria <- dplyr::filter(world_mortality_df, country_name == 'Bulgaria')
USA <- dplyr::filter(world_mortality_df, country_name == 'United States')
Mexico <- dplyr::filter(world_mortality_df, country_name == 'Mexico')
Australia <- dplyr::filter(world_mortality_df, country_name == 'Australia')
Italy <- dplyr::filter(world_mortality_df, country_name == 'Italy')
Peru <- dplyr::filter(world_mortality_df, country_name == 'Peru')
```

Determining begin of analysis. In the article: week 10 for weekly and from March for monthly.
```{r}
begin <- function(data){
  if(data[1,5]=='weekly'){
    beg = 10
  }
  else if(data[1,5]=='monthly'){
    beg = 3 
  }
  else 
    beg = 1
  
  return(beg)
}
```

Calculating excess mortality
```{r}
#Code based on code in article:
#https://github.com/dkobak/excess-mortality/blob/main/baselines-stmf.ipynb
predict <- function(data){
#ordering data
  if(data$time_unit[1] == "weekly"){
    data$year_plus_time_unit <- data$year + (data$time / 52)
  }
  else 
    data$year_plus_time_unit <- data$year + (data$time / 12)
#extract data from 2015-2019 (pre-2020) (weeks < 53)
  pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
  m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
  
#one-hot encoding for weeks or months
  onehot <- matrix(0, sum(pre), m)
  for (i in 1:sum(pre)) {
    onehot[i, data[pre,4][i]] <- 1
  }
  predictors <- cbind(data[pre,3], onehot) #years in the first column
  colnames(predictors) <- c('Year', paste0('Week', 1:m))
  
#linear regression model without intercept
  reg <- lm(data[pre,6] ~ 0 + ., data = as.data.frame(predictors))
#histogram of residuals
  hist(residuals(reg), breaks=30)
  plot(data[pre,7], residuals(reg), type='l', ylab='Residuals', xlab='Time')

#plot actual values
  predictions <- stats::predict(reg)
  plot(data[pre,7], data[pre, 6], type = "l", col = "blue", lwd = 2,
     xlab = "Time", ylab = "Values",
     main = "Actual vs. Predicted Over Time")

#add predictions
  lines(data[pre,7], predictions, col = "red", lwd = 2, lty = 2)
  legend("topright", legend = c("Actual", "Predicted"),
       col = c("blue", "red"), lty = c(1, 2), lwd = 2)
  
#create predictor matrix for 2020 
  predictors2020 <- cbind(rep(2020, m), diag(m))
  colnames(predictors2020) <- colnames(predictors)
  
#predict baseline values for 2020 using the regression model
  baseline <- stats::predict(reg, newdata = as.data.frame(predictors2020))
  if(max(data[,4]==53)){ #baseline week 53 is baseline week 52
    baseline <- c(baseline, tail(baseline, 1)) 
  }
  time2020 <- (data[,3]==2020)

  total_time <- ((data[,3] >= 2015) & (data[,3] <= 2016) & (data[,4] < 53)) | ((data[,3]>2016) & (data[,3]<=2020))
  total_prediction <- c(predictions, baseline)

  plot(data[total_time,7], data[total_time, 6], type = "l", col = "blue", lwd = 2,
     xlab = "Time", ylab = "Deaths",
     main = "Actual vs. Predicted Over Time")
#add predictions
  lines(data[total_time,7], total_prediction, col = "red", lwd = 2, lty = 2)

  legend("topleft", legend = c("Actual", "Predicted"),
       col = c("blue", "red"), lty = c(1, 2), lwd = 2)
  
#calculating and plotting difference in actual number of deaths and predicted
  ind2020 <- (data[,3]==2020)
  ind2021 <- (data[,3]==2021)
  diff2020 <- data[ind2020, 6] - baseline[data[ind2020, 4]]
  diff2021 <- data[ind2021, 6] - baseline[data[ind2021, 4]]
  plot(diff2020, type='l', xlab='Week', ylab='Excess deaths')
  title('Excess 2020')
  plot(diff2021, type='l', xlab='Week', ylab='Excess deaths')
  title('Excess 2021')
  
  excess_begin = begin(data)
#calculating excess mortality as defined in article
  total_diff <- sum(diff2020[excess_begin:length(diff2020)])+ sum(diff2021) 
  if(data[1,2]=='Netherlands' || data[1,2]=='Belgium'|| data[1,2]=='Luxembourg' || data[1,2]=='Germany'){
    total_diff <- total_diff - diff2020[32] - diff2020[33] - diff2020[34] #heat wave in Europe
  }
  
  return(total_diff)
}
```

```{r}
total_diff <- predict(NL)
print(total_diff)
``` 


```{r}
#ks.test(residuals(model), "pnorm")

#acf(residuals(model), type= 'correlation')
  #Box.test(residuals(model), lag = 1, type = "Ljung-Box")

  # Extract coefficients
  #coefficients <- coef(reg)[-1]  # Remove the first coefficient (year effect)

# Plot coefficients for weeks
  #plot(1:length(coefficients), coefficients, type="b", 
  #   xlab = "Week Number", ylab = "Coefficient Value", 
  #   main = "Regression Coefficients Over Weeks", col = "blue", pch = 16)
  #abline(h=0, col="red", lty=2)  # Add a reference line at y=0
```



