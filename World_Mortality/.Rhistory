# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$time <- data$year_plus_time_unit
#Code based on code in article:
#https://github.com/dkobak/excess-mortality/blob/main/baselines-stmf.ipynb
data = NL
View(data)
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$time <- data$year_plus_time_unit[pre,]
#Code based on code in article:
#https://github.com/dkobak/excess-mortality/blob/main/baselines-stmf.ipynb
data = NL
View(data)
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$time <- data[pre,7]
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$time <- as.numeric(predictors_df$time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year, data = predictors_df, correlation = corAR1(form ~time))
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$time)
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
# Fit GLS model
g <- nlme::gls(response ~ year, data = predictors_df, correlation = corAR1(form ~year_time))
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year, data = predictors_df, correlation = corAR1(form ~year_time))
Egypt <- dplyr::filter(world_mortality_df, country_name == 'Egypt')
Namibia <- dplyr::filter(world_mortality_df, country_name == 'Namibia')
Colombia <- dplyr::filter(world_mortality_df, country_name == 'Colombia')
Argentina <- dplyr::filter(world_mortality_df, country_name == 'Argentina')
Russia <- dplyr::filter(world_mortality_df, country_name == 'Russia')
Japan <- dplyr::filter(world_mortality_df, country_name == 'Japan')
Thailand <- dplyr::filter(world_mortality_df, country_name == 'Thailand')
NL <- dplyr::filter(world_mortality_df, country_name == 'Netherlands')
Luxembourg <- dplyr::filter(world_mortality_df, country_name == 'Luxembourg')
UK <- dplyr::filter(world_mortality_df, country_name == 'United Kingdom')
Estonia <- dplyr::filter(world_mortality_df, country_name == 'Estonia')
Bulgaria <- dplyr::filter(world_mortality_df, country_name == 'Bulgaria')
USA <- dplyr::filter(world_mortality_df, country_name == 'United States')
Mexico <- dplyr::filter(world_mortality_df, country_name == 'Mexico')
Australia <- dplyr::filter(world_mortality_df, country_name == 'Australia')
Italy <- dplyr::filter(world_mortality_df, country_name == 'Italy')
Peru <- dplyr::filter(world_mortality_df, country_name == 'Peru')
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year, data = predictors_df, correlation = corAR1(form ~year_time))
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ X1, data = predictors_df, correlation = corAR1(form ~year_time))
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year, data = predictors_df)
# # Convert to data frame with meaningful column names
# predictors <- data.frame(Year = data[pre, 3], onehot, Response = data[pre, 6])
# colnames(predictors) <- c('Year', paste0('Week', 1:m), 'Response')
#
# # Fit GLS model with Response as the dependent variable
# reg <- nlme::gls(Response ~, data=predictors, correlation=corAR1(value = 0.8, form=~1))
#
#
# # Print results
# print(reg)
#   X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51+X52
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year, data = predictors_df)
summary(g)
# # Convert to data frame with meaningful column names
# predictors <- data.frame(Year = data[pre, 3], onehot, Response = data[pre, 6])
# colnames(predictors) <- c('Year', paste0('Week', 1:m), 'Response')
#
# # Fit GLS model with Response as the dependent variable
# reg <- nlme::gls(Response ~, data=predictors, correlation=corAR1(value = 0.8, form=~1))
#
#
# # Print results
# print(reg)
#   X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51+X52
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year + X1, data = predictors_df)
summary(g)
# # Convert to data frame with meaningful column names
# predictors <- data.frame(Year = data[pre, 3], onehot, Response = data[pre, 6])
# colnames(predictors) <- c('Year', paste0('Week', 1:m), 'Response')
#
# # Fit GLS model with Response as the dependent variable
# reg <- nlme::gls(Response ~, data=predictors, correlation=corAR1(value = 0.8, form=~1))
#
#
# # Print results
# print(reg)
#   X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51+X52
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year + X1, data = predictors_df, correlation=corAR1)
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year + X1, data = predictors_df, correlation=corAR1(form = ~1))
summary(g)
# # Convert to data frame with meaningful column names
# predictors <- data.frame(Year = data[pre, 3], onehot, Response = data[pre, 6])
# colnames(predictors) <- c('Year', paste0('Week', 1:m), 'Response')
#
# # Fit GLS model with Response as the dependent variable
# reg <- nlme::gls(Response ~, data=predictors, correlation=corAR1(value = 0.8, form=~1))
#
#
# # Print results
# print(reg)
#   X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51+X52
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year +X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51+X52, data = predictors_df, correlation=corAR1(form = ~1))
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year +X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51, data = predictors_df, correlation=corAR1(form = ~1))
summary(g)
# # Convert to data frame with meaningful column names
# predictors <- data.frame(Year = data[pre, 3], onehot, Response = data[pre, 6])
# colnames(predictors) <- c('Year', paste0('Week', 1:m), 'Response')
#
# # Fit GLS model with Response as the dependent variable
# reg <- nlme::gls(Response ~, data=predictors, correlation=corAR1(value = 0.8, form=~1))
#
#
# # Print results
# print(reg)
#   X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51+X52
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year +X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51, data = predictors_df, correlation=corAR1(form = ~1))
summary(g, cor=TRUE)
# # Convert to data frame with meaningful column names
# predictors <- data.frame(Year = data[pre, 3], onehot, Response = data[pre, 6])
# colnames(predictors) <- c('Year', paste0('Week', 1:m), 'Response')
#
# # Fit GLS model with Response as the dependent variable
# reg <- nlme::gls(Response ~, data=predictors, correlation=corAR1(value = 0.8, form=~1))
#
#
# # Print results
# print(reg)
#   X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51+X52
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year +X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51, data = predictors_df, correlation=corAR1(form = ~year_time))
summary(g, cor=TRUE)
# # Convert to data frame with meaningful column names
# predictors <- data.frame(Year = data[pre, 3], onehot, Response = data[pre, 6])
# colnames(predictors) <- c('Year', paste0('Week', 1:m), 'Response')
#
# # Fit GLS model with Response as the dependent variable
# reg <- nlme::gls(Response ~, data=predictors, correlation=corAR1(value = 0.8, form=~1))
#
#
# # Print results
# print(reg)
#   X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51+X52
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year +X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51, data = predictors_df, correlation=corAR1(form = ~year_time))
summary(g)
intervals(g)
data = NL
#ordering data
if(data$time_unit[1] == "weekly"){
data$year_plus_time_unit <- data$year + (data$time / 52)
}
#extract data from 2015-2019 (pre-2020) (weeks < 53)
pre <- (data[,3] >= 2015) & (data[,3] < 2020) & (data[,4] < 53)
m <- max(data[pre, 4]) #12 or 52, depending on weekly or monthly measures
#one-hot encoding for weeks or months
onehot <- matrix(0, sum(pre), m)
for (i in 1:sum(pre)) {
onehot[i, data[pre,4][i]] <- 1
}
# Create a data frame for modeling
predictors_df <- data.frame(year = data[pre, 3], onehot)
predictors_df$response <- data[pre, 6]
predictors_df$year_time <- data[pre,7]-2015
predictors_df$year <- as.numeric(predictors_df$year)
predictors_df$year_time <- as.numeric(predictors_df$year_time)
View(predictors_df)
# Fit GLS model
g <- nlme::gls(response ~ year +X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51, data = predictors_df, correlation=corAR1(form = ~1))
summary(g)
intervals(g)
# # Convert to data frame with meaningful column names
# predictors <- data.frame(Year = data[pre, 3], onehot, Response = data[pre, 6])
# colnames(predictors) <- c('Year', paste0('Week', 1:m), 'Response')
#
# # Fit GLS model with Response as the dependent variable
# reg <- nlme::gls(Response ~, data=predictors, correlation=corAR1(value = 0.8, form=~1))
#
#
# # Print results
# print(reg)
#   X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20+X21+X22+X23+X24+X25+X26+X27+X28+X29+X30+X31+X32+X33+X34+X35+X36+X37+X38+X39+X40+X41+X42+X43+X44+X45+X46+X47+X48+X49+X50+X51+X52
